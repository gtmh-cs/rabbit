using Microsoft.CodeAnalysis;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;

namespace GTMH.Rabbit.RPC.CodeGen
{
  internal class ServerCodeGen
  {
    public static void Write(InterfaceDefn a_Defn, SourceProductionContext a_Compiler)
    {
      var code = new Code();
      var implClassName = a_Defn.GetImplClassName("ServiceHost");
      code.WriteLine($"// Generated by {nameof(RPCCodeGenerator)}");
      code.WriteLine("#pragma warning disable 0105 // we might duplicate namespaces");
      foreach(var use in a_Defn.Usings)
      {
        code.WriteLine(use);
      }
      code.WriteLine("using Microsoft.Extensions.Logging;");
      code.WriteLine("using GTMH.Rabbit;");
      code.WriteLine("using GTMH.Rabbit.RPC;");
      code.WriteLine("using RabbitMQ.Client;");
      code.WriteLine("#pragma warning restore 0105");

      if(!string.IsNullOrEmpty(a_Defn.Namespace))
      {
        code.WriteLine($"namespace {a_Defn.Namespace};");
      }
      code.WriteLine($"{a_Defn.Visibility} class {implClassName} : RPCServer");
      code.WriteLine("{");
      using(code.Indent())
      {
        // implementation
        code.WriteLine($"public override string InterfaceType=>\"{a_Defn.Namespace}.{a_Defn.Name}\";");
        WriteConstructors(code, implClassName, a_Defn.Name);
        WriteDispatchMethod(code, a_Defn);
      }
      code.WriteLine("}");
      a_Compiler.AddSource($"{implClassName}.g.cs", code.ToString());
    }

    private static void WriteDispatchMethod(Code code, InterfaceDefn a_Defn)
    {
      bool writeAsync = a_Defn.Methods.Select(_=>CommonCodeGen.IsAsyncReturnType(_.Type)).Any(_=>_.IsAsync);
      var methodModifier = writeAsync ? "async " : "";
      code.WriteLine($"public override {methodModifier}ValueTask<RPCResult> Dispatch(RPCCall a_Call)");
      code.WriteLine("{");
      using(code.Indent())
      {
        code.WriteLine("switch(a_Call.MethodName)");
        code.WriteLine("{");
        using(code.Indent())
        {
          foreach(var method in a_Defn.Methods)
          {
            var asyncDefn = CommonCodeGen.IsAsyncReturnType(method.Type);
            if(!asyncDefn.IsAsync)
            {
              WriteMethodCase(code, method);
            }
            else
            {
              WriteAsyncMethodCase(code, method, asyncDefn.Type);
            }
          }
          code.WriteLine(@"default: throw new RPCException($""Method not found: {a_Call.MethodName}"");");
        }
        code.WriteLine("}");
      }
      code.WriteLine("}");
    }

    public static string CreateArgsUnpack(MethodDefn a_Method)
    {
      var args = new StringBuilder();
      foreach(var arg in a_Method.Args.Select(_ => _.Type).Zip(Enumerable.Range(0, a_Method.Args.Count), (type, index) => new { Type = type, Index = index }))
      {
        if(args.Length > 0) args.Append(", ");
        args.Append($"a_Call.Unpack<{arg.Type}>({arg.Index})");
      }
      return args.ToString();
    }

    private static void WriteAsyncMethodCase(Code code, MethodDefn a_Method, string a_UnderlyingType)
    {
      code.WriteLine($"case \"{a_Method.Name}\":");
      code.WriteLine("{");
      using(code.Indent())
      {
        var args = CreateArgsUnpack(a_Method);
        if(string.IsNullOrEmpty(a_UnderlyingType))
        {
          code.WriteLine($"await m_DispatchTarget.{a_Method.Name}({args}).ConfigureAwait(false);");
          code.WriteLine($"return RPCResult.Void();");
        }
        else
        {
          code.WriteLine($"var result = await m_DispatchTarget.{a_Method.Name}({args}).ConfigureAwait(false);");
          code.WriteLine("return RPCResult.ReturnValue(result);");
        }
      }
      code.WriteLine("}");
    }

    private static void WriteMethodCase(Code code, MethodDefn a_Method)
    {
      code.WriteLine($"case \"{a_Method.Name}\":");
      code.WriteLine("{");
      using(code.Indent())
      {
        var args = CreateArgsUnpack(a_Method);
        if(a_Method.Type == "void")
        {
          code.WriteLine($"m_DispatchTarget.{a_Method.Name}({args});");
          code.WriteLine($"return ValueTask.FromResult(RPCResult.Void());");
        }
        else
        {
          code.WriteLine($"return ValueTask.FromResult(RPCResult.ReturnValue(m_DispatchTarget.{a_Method.Name}({args})));");
        }
      }
      code.WriteLine("}");
    }

    private static void WriteConstructors(Code code, string a_ClassName, string a_InterfaceName)
    {
      code.WriteLine($"private readonly {a_InterfaceName} m_DispatchTarget;");
      code.WriteLine($"public {a_ClassName}(IRPCFactory a_Factory, {a_InterfaceName} a_DispatchTarget) : this(a_Factory, null, null, a_DispatchTarget) {{}}");
      code.WriteLine($"public {a_ClassName}(IRPCFactory a_Factory, {a_InterfaceName} a_DispatchTarget, Microsoft.Extensions.Logging.ILogger a_Logger) : this(a_Factory, null, a_Logger, a_DispatchTarget) {{}}");
      code.WriteLine($"public {a_ClassName}(IRPCFactory a_Factory, IRPCTopology a_Env, {a_InterfaceName} a_DispatchTarget) : this(a_Factory, a_Env, null, a_DispatchTarget) {{}}");
      code.WriteLine($"public {a_ClassName}(IRPCFactory a_Factory, IRPCTopology a_Env, Microsoft.Extensions.Logging.ILogger a_Logger, {a_InterfaceName} a_DispatchTarget) : base(a_Factory, a_Env, a_Logger)");
      code.WriteLine("{");
      using(code.Indent())
      {
        code.WriteLine("m_DispatchTarget = a_DispatchTarget;");
      }
      code.WriteLine("}");
    }
  }
}
