using Microsoft.CodeAnalysis;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace GTMH.Rabbit.RPC.CodeGen
{
  public static class ClientCodeGen
  {
    public static void Write(InterfaceDefn a_Defn, SourceProductionContext compiler)
    {
      var code = new Code();
      var implClassName = a_Defn.GetImplClassName("Client");
      code.WriteLine($"// Generated by {nameof(RPCCodeGenerator)}");
      code.WriteLine("#nullable enable // for CS8669 ");
      code.WriteLine("#pragma warning disable 0105 // we might duplicate namespaces");
      foreach(var use in a_Defn.Usings)
      {
        code.WriteLine(use);
      }
      code.WriteLine("using Microsoft.Extensions.Logging;");
      code.WriteLine("using GTMH.Rabbit;");
      code.WriteLine("using GTMH.Rabbit.RPC;");
      code.WriteLine("using RabbitMQ.Client;");
      code.WriteLine("#pragma warning restore 0105");

      if(!string.IsNullOrEmpty(a_Defn.Namespace))
      {
        code.WriteLine($"namespace {a_Defn.Namespace};");
      }

      code.WriteLine($"public class {implClassName} : RPCClient, {a_Defn.Name}");
      code.WriteLine("{");
      using(code.Indent())
      {
        code.WriteLine($"public override string InterfaceType=>\"{a_Defn.Namespace}.{a_Defn.Name}\";");
        WriteClientConstructor(code, implClassName);
        // implementation
        foreach(var method in a_Defn.Methods)
        {
          var asyncType = CommonCodeGen.IsAsyncReturnType(method.Type);
          if(asyncType.IsAsync)
          {
            WriteAsyncMethodImpl(code, method, asyncType.Type);
          }
          else
          {
            WriteLegacyClientMethodImpl(code, method);
            WriteLegacyAsyncClientMethodImpl(code, method);
          }
        }
      }
      code.WriteLine("}");
      compiler.AddSource($"{implClassName}.g.cs", code.ToString());
    }

    public static void WriteClientConstructor(Code code, string implClassName)
    {
      code.WriteLine($"public {implClassName}(IRPCFactory a_Factory, IRPCTopology a_Topology, Microsoft.Extensions.Logging.ILogger a_Logger, IRPCClientConfig ? a_Config) : base(a_Factory, a_Topology, a_Logger, a_Config) {{ }}");
    }
    public static void WriteAsyncMethodImpl(Code code, MethodDefn a_Method, string a_Type)
    {
      code.WriteLine($"public async {a_Method.Type} {a_Method.Name}({string.Join(", ", a_Method.Args.Select(arg=>$"{arg.Type} {arg.Name}"))})");
      code.WriteLine("{");
      using(code.Indent())
      {
        code.WriteLine(DefinePack(a_Method));
        code.WriteLine("var result = await this.DispatchAsync(call).ConfigureAwait(false);");
        code.WriteLine("if ( result.ExceptionData != null ) throw new ServerSideException((string)result.ExceptionData);");
        if(string.IsNullOrEmpty(a_Type))
        {
          code.WriteLine("return;");
        }
        else
        {
          code.WriteLine($"return result.Unpack<{a_Type}>();");
        }
      }
      code.WriteLine("}");
    }

    public static void WriteLegacyAsyncClientMethodImpl(Code code, MethodDefn a_Method)
    {
      var returnType = a_Method.Type=="void" ? "Task" : $"Task<{a_Method.Type}>";
      code.WriteLine($"public async {returnType} {a_Method.Name}Async({string.Join(", ", a_Method.Args.Select(arg=>$"{arg.Type} {arg.Name}"))})");
      code.WriteLine("{");
      using(code.Indent())
      {
        code.WriteLine(DefinePack(a_Method));

        code.WriteLine("var result = await this.DispatchAsync(call).ConfigureAwait(false);");
        code.WriteLine("if ( result.ExceptionData != null ) throw new ServerSideException((string)result.ExceptionData);");
        if(a_Method.Type == "void")
        {
          code.WriteLine("return;");
        }
        else
        {
          code.WriteLine($"return result.Unpack<{a_Method.Type}>();");
        }
      }
      code.WriteLine("}");
    }

    public static string DefinePack(MethodDefn a_Method)
    {
      if(a_Method.Args.Any())
      {
        return $"var call = RPCCall.Pack(\"{a_Method.Name}\", {string.Join(", ", a_Method.Args.Select(arg => arg.Name))});";
      }
      else
      {
        return $"var call = RPCCall.Pack(\"{a_Method.Name}\");";
      }
    }

    public static void WriteLegacyClientMethodImpl(Code code, MethodDefn a_Method)
    {
      code.WriteLine($"public {a_Method.Type} {a_Method.Name}({string.Join(", ", a_Method.Args.Select(arg=>$"{arg.Type} {arg.Name}"))})");
      code.WriteLine("{");
      using(code.Indent())
      {
        code.WriteLine(DefinePack(a_Method));
        code.WriteLine("var result = this.DispatchAsync(call).Result;");
        code.WriteLine($"if(Log.IsEnabled(LogLevel.Trace)) Log.LogTrace($\"RPCClient[{{ClientId}}]::Recv[{a_Method.Name}]\");");
        code.WriteLine("if ( result.ExceptionData != null ) throw new ServerSideException((string)result.ExceptionData);");
        if(a_Method.Type == "void")
        {
          code.WriteLine("return;");
        }
        else
        {
          code.WriteLine($"return result.Unpack<{a_Method.Type}>();");
        }
      }
      code.WriteLine("}");
    }
  }
}
